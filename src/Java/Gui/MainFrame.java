/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Java.Gui;

import Java.Dao.DBhelper;
import Java.Dao.LoginDao;
import Java.Dao.LoginImple;
import Java.Model.A;
import Java.Model.B;
import Java.Model.Doctor;
import Java.Model.Login;
import Java.Model.Patient;
import Java.Model.Payment;
import Java.Model.Schedule;
import Java.Model.Soreness;
import Java.Service.HospitalService;
import Java.Service.LoginServImple;
import Java.Service.LoginService;
import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.lang.invoke.MethodHandles;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.MessageFormat;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author User
 */
public class MainFrame extends javax.swing.JFrame {
    
    
    

    private HospitalService hospitalService;
    LoginDao loginDao = new LoginImple();
    LoginService loginService = new LoginServImple(loginDao);
    String globname;
    
        
    
    public MainFrame() {
        initComponents();
        
    }

    public MainFrame(HospitalService hospitalService) {
      
            initComponents();
            this.hospitalService = hospitalService;
            Date();
    }

    public MainFrame(HospitalService hospitalService, Login login) {
            
            initComponents();
            this.hospitalService = hospitalService;
            jLabel2.setText(login.getName() + " " + login.getSurname());
            Date();
            changeVisible(false);
            changeEnable(false);
            changeRole(login.getRole().getRole_name());
      

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        patientBtn = new javax.swing.JButton();
        sorenessBtn = new javax.swing.JButton();
        doctorBtn = new javax.swing.JButton();
        treatmentBtn = new javax.swing.JButton();
        paymentBtn = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        newBtn = new javax.swing.JButton();
        editBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        searchtn = new javax.swing.JButton();
        logoutBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        keywordTxt = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jToolBar1 = new javax.swing.JToolBar();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        patientBtn.setIcon(new javax.swing.ImageIcon("C:\\Users\\User\\Documents\\NetBeansProjects\\Hospital\\images\\patient.png")); // NOI18N
        patientBtn.setText("Patient Data");
        patientBtn.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        patientBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientBtnActionPerformed(evt);
            }
        });

        sorenessBtn.setIcon(new javax.swing.ImageIcon("D:\\Download\\soreness.png")); // NOI18N
        sorenessBtn.setText("Soreness Data");
        sorenessBtn.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        sorenessBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sorenessBtnActionPerformed(evt);
            }
        });

        doctorBtn.setIcon(new javax.swing.ImageIcon("C:\\Users\\User\\Documents\\NetBeansProjects\\Hospital\\images\\doctorr.png")); // NOI18N
        doctorBtn.setText("Doctor Data");
        doctorBtn.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        doctorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doctorBtnActionPerformed(evt);
            }
        });

        treatmentBtn.setIcon(new javax.swing.ImageIcon("D:\\Download\\treatment.png")); // NOI18N
        treatmentBtn.setText("Treatment Data");
        treatmentBtn.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        treatmentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                treatmentBtnActionPerformed(evt);
            }
        });

        paymentBtn.setIcon(new javax.swing.ImageIcon("D:\\Download\\icons8-card-payment-48.png")); // NOI18N
        paymentBtn.setText("Payment");
        paymentBtn.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        paymentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paymentBtnActionPerformed(evt);
            }
        });

        jButton1.setIcon(new javax.swing.ImageIcon("D:\\Download\\icons8-add-user-male-48.png")); // NOI18N
        jButton1.setText("Registerr");
        jButton1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(patientBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(sorenessBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(doctorBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(treatmentBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(paymentBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(patientBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(sorenessBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(doctorBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(treatmentBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(paymentBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        newBtn.setText("New");
        newBtn.setToolTipText("New Data...(Ctrl+N)");
        newBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newBtnActionPerformed(evt);
            }
        });

        editBtn.setIcon(new javax.swing.ImageIcon("C:\\Users\\User\\Documents\\NetBeansProjects\\Hospital\\images\\updateK.png")); // NOI18N
        editBtn.setText("Edit");
        editBtn.setToolTipText("");
        editBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBtnActionPerformed(evt);
            }
        });

        deleteBtn.setIcon(new javax.swing.ImageIcon("C:\\Users\\User\\Documents\\NetBeansProjects\\Hospital\\images\\DeleteK.png")); // NOI18N
        deleteBtn.setText("Delete");
        deleteBtn.setToolTipText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        searchtn.setIcon(new javax.swing.ImageIcon("D:\\Download\\icons8-search-24.png")); // NOI18N
        searchtn.setText("Search");
        searchtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchtnActionPerformed(evt);
            }
        });

        logoutBtn.setIcon(new javax.swing.ImageIcon("D:\\Download\\icons8-shutdown-24.png")); // NOI18N
        logoutBtn.setText("Log Out");
        logoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutBtnActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Welcome");

        keywordTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                keywordTxtKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(newBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(editBtn)
                .addGap(18, 18, 18)
                .addComponent(deleteBtn)
                .addGap(70, 70, 70)
                .addComponent(keywordTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(searchtn)
                .addGap(34, 34, 34)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(logoutBtn)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(newBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(editBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(searchtn, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(logoutBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(keywordTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable1.setToolTipText("Hospital Table");
        jTable1.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jTable1AncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jToolBar1.setRollover(true);

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("CLose");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        jMenuItem2.setText("Delete");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("Print");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("New");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Date");
        jMenuBar1.add(jMenu3);

        jMenu4.setText("Time");
        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1)
                        .addGap(79, 79, 79))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 485, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(29, 29, 29))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
//       public void static j Update_patient() {
//        
//       
//        String sql = "SELECT * FROM PATIENT\n"
//                + "WHERE ACTIVE=1";
//        try {
//            ps = c.prepareStatement(sql);
//            rs = ps.executeQuery();
//            jTable1.setModel(DbUtils.resultSetToTableModel(rs));
//            
//            
//        } catch (Exception ex) {
//            ex.printStackTrace();
//        }
//    }
    private void newBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newBtnActionPerformed
        switch (globname) {
            case "patient":
                try {
                    NewPatientFrame patientFrame = new NewPatientFrame(hospitalService);
                    patientFrame.setVisible(true);
                    List<Patient> patients = hospitalService.getpatientlist();
                    showPatientData(patients);
                } catch (Exception ex) {
                    ex.printStackTrace();
                }

                break;

            case "soreness":
                NewSorenessFrame sorenessFrame = new NewSorenessFrame(hospitalService);
                sorenessFrame.setVisible(true);
                break;

            case "doctor":
                NewDoctorFrame doctorFrame = new NewDoctorFrame(hospitalService);
                doctorFrame.setVisible(true);
                break;

            case "treatment":
                NewTreatmentFrame treatmentFrame = new NewTreatmentFrame(hospitalService);
                treatmentFrame.setVisible(true);
                break;

            case "register":
                NewRegisterFrame registerFrame = new NewRegisterFrame(hospitalService);
                registerFrame.setVisible(true);
                break;

            case "payment":
                NewPaymentFrame newPaymentFrame = new NewPaymentFrame(hospitalService);
                newPaymentFrame.setVisible(true);
                break;

        }
    }//GEN-LAST:event_newBtnActionPerformed

    private void editBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBtnActionPerformed
        int selectRowIndex = jTable1.getSelectedRow();
        long selectRow = (long) jTable1.getValueAt(selectRowIndex, 0);
        switch (globname) {
            case "patient":
                EditPatientFrame edpatientFrame = new EditPatientFrame(selectRow, hospitalService);
                edpatientFrame.setVisible(true);
                
                break;

            case "soreness":
                EditSorenessFrame editSorenessFrame = new EditSorenessFrame(selectRow, hospitalService);
                editSorenessFrame.setVisible(true);
                break;

            case "doctor":
                EditDoctorFrame editDoctorFrame = new EditDoctorFrame(selectRow, hospitalService);
                editDoctorFrame.setVisible(true);
                break;

            case "treatment":
                EditTreatmentFrame editTreatmentFrame = new EditTreatmentFrame(selectRow, hospitalService);
                editTreatmentFrame.setVisible(true);
                break;

            case "payment":
                EditPaymentFrame editpaymentFrame = new EditPaymentFrame(selectRow, hospitalService);
                editpaymentFrame.setVisible(true);
                break;

            case "register":
                EditLoginFrame editLoginFrame = new EditLoginFrame(selectRow, loginService);
                editLoginFrame.setVisible(true);
                break;
        }
    }//GEN-LAST:event_editBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        int selectRowindex = jTable1.getSelectedRow();
        long selectRow = (long) jTable1.getValueAt(selectRowindex, 0);
        try {
            switch (globname) {
                case "patient":
                    int isPatientdialog = JOptionPane.showConfirmDialog(null, "Are you sure?", "Delete", JOptionPane.YES_NO_OPTION);
                    if (isPatientdialog == JOptionPane.YES_OPTION) {
                        boolean isDelete = hospitalService.deletepatient(selectRow);
                        if (isDelete) {
                            JOptionPane.showMessageDialog(null, "Patient has been successfully deleted!", "success", JOptionPane.INFORMATION_MESSAGE);
                            List<Patient> patients = hospitalService.getpatientlist();
                            showPatientData(patients);
                        } else {
                            JOptionPane.showMessageDialog(null, "Problem !!! Patient has not been successfully deleted!", "error", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                    break;
                case "soreness":
                    int isSorenessdiaolog = JOptionPane.showConfirmDialog(null, "Are you sure", "Delete", JOptionPane.YES_NO_OPTION);
                    if (isSorenessdiaolog == JOptionPane.YES_OPTION) {
                        boolean isDelete = hospitalService.deletesoreness(selectRow);
                        if (isDelete) {
                            JOptionPane.showMessageDialog(null, "Your information has been successfully deleted", "Delete", JOptionPane.INFORMATION_MESSAGE);
                            List<Soreness> sorenesses = hospitalService.getsorenesslist();
                            showSorenessData(sorenesses);
                        } else {
                            JOptionPane.showMessageDialog(null, "An error occurred while deleting your information", "error", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                    break;
                case "doctor":
                    int isDoctordialog = JOptionPane.showConfirmDialog(null, "Are you sure?", "Delete", JOptionPane.YES_NO_OPTION);
                    if (isDoctordialog == JOptionPane.YES_OPTION) {
                        boolean isDelete = hospitalService.deletedoctor(selectRow);
                        if (isDelete) {
                            JOptionPane.showMessageDialog(null, "Doctor has been successfully deleted!", "success", JOptionPane.INFORMATION_MESSAGE);
                            List<Doctor> doctors = hospitalService.getdoctorlist();
                            showDoctorData(doctors);
                        } else {
                            JOptionPane.showMessageDialog(null, "Problem !!! Doctor has not been successfully deleted!", "error", JOptionPane.ERROR_MESSAGE);
                        }
                    }

                    break;
                case "treatment":

                    break;

                case "register":
                    int isRegisterdialog = JOptionPane.showConfirmDialog(null, "Are you sure?", "Delete", JOptionPane.YES_NO_OPTION);
                    if (isRegisterdialog == JOptionPane.YES_OPTION) {
                        boolean isDelete = loginService.deleteLogin(selectRow);
                        if (isDelete) {
                            JOptionPane.showMessageDialog(null, "Patient has been successfully deleted!", "success", JOptionPane.INFORMATION_MESSAGE);
                            List<Login> logins = loginService.getloginlist();
                            showRegister(logins);
                        } else {
                            JOptionPane.showMessageDialog(null, "Problem !!! Patient has not been successfully deleted!", "error", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                    break;
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void searchtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchtnActionPerformed
        String keyword = keywordTxt.getText();
        try {
            switch (globname) {
                case "patient":
                    List<Patient> patients = hospitalService.searchPatientDataa(keyword);
                    showPatientData(patients);
                    break;

                case "soreness":
                    List<Soreness> sorenesses = hospitalService.searchsorenessData(keyword);
                    showSorenessData(sorenesses);
                    break;

                case "doctor":
                    List<Doctor> doctors = hospitalService.searchDoctorData(keyword);
                    showDoctorData(doctors);
                    break;

                case "treatment":
                    List<Schedule> schedules = hospitalService.searchScheduleData(keyword);
                    showTreatment(schedules);
                    break;

                case "payment":
                    List<Payment> payments = hospitalService.searchPaymentData(keyword);
                    showPaymentData(payments);
                    break;

                case "register":
                    List<Login> logins = loginService.searchLoginData(keyword);
                    showRegister(logins);
                    break;
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_searchtnActionPerformed

    private void patientBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientBtnActionPerformed
        try {
            List<Patient> patients = hospitalService.getpatientlist();
            showPatientData(patients);
            changeEnable(true);
            globname = "patient";
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_patientBtnActionPerformed

    private void sorenessBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sorenessBtnActionPerformed
        try {
            List<Soreness> sorenesses = hospitalService.getsorenesslist();
            showSorenessData(sorenesses);
            changeEnable(true);
            globname = "soreness";
        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }//GEN-LAST:event_sorenessBtnActionPerformed

    private void doctorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doctorBtnActionPerformed
        try {
            List<Doctor> doctors = hospitalService.getdoctorlist();
            showDoctorData(doctors);
            changeEnable(true);
            globname = "doctor";
        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }//GEN-LAST:event_doctorBtnActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        System.exit(0);
        close();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        int selectRowindex = jTable1.getSelectedRow();
        long selectRow = (long) jTable1.getValueAt(selectRowindex, 0);
        try {
            switch (globname) {
                case "patient":
                    int isPatientdialog = JOptionPane.showConfirmDialog(null, "Are you sure?", "Delete", JOptionPane.YES_NO_OPTION);
                    if (isPatientdialog == JOptionPane.YES_OPTION) {
                        boolean isDelete = hospitalService.deletepatient(selectRow);
                        if (isDelete) {
                            JOptionPane.showMessageDialog(null, "Patient has been successfully deleted!", "success", JOptionPane.INFORMATION_MESSAGE);
                            List<Patient> patients = hospitalService.getpatientlist();
                            showPatientData(patients);
                        } else {
                            JOptionPane.showMessageDialog(null, "Problem !!! Patient has not been successfully deleted!", "error", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                    break;
                case "soreness":
                    int isSorenessdiaolog = JOptionPane.showConfirmDialog(null, "Are you sure", "Delete", JOptionPane.YES_NO_OPTION);
                    if (isSorenessdiaolog == JOptionPane.YES_OPTION) {
                        boolean isDelete = hospitalService.deletesoreness(selectRow);
                        if (isDelete) {
                            JOptionPane.showMessageDialog(null, "Your information has been successfully deleted", "Delete", JOptionPane.INFORMATION_MESSAGE);
                            List<Soreness> sorenesses = hospitalService.getsorenesslist();
                            showSorenessData(sorenesses);
                        } else {
                            JOptionPane.showMessageDialog(null, "An error occurred while deleting your information", "error", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                    break;
                case "doctor":
                    int isDoctordialog = JOptionPane.showConfirmDialog(null, "Are you sure?", "Delete", JOptionPane.YES_NO_OPTION);
                    if (isDoctordialog == JOptionPane.YES_OPTION) {
                        boolean isDelete = hospitalService.deletedoctor(selectRow);
                        if (isDelete) {
                            JOptionPane.showMessageDialog(null, "Doctor has been successfully deleted!", "success", JOptionPane.INFORMATION_MESSAGE);
                            List<Doctor> doctors = hospitalService.getdoctorlist();
                            showDoctorData(doctors);
                        } else {
                            JOptionPane.showMessageDialog(null, "Problem !!! Doctor has not been successfully deleted!", "error", JOptionPane.ERROR_MESSAGE);
                        }
                    }

                    break;
                case "treatment":

                    break;

                case "register":
                    int isRegisterdialog = JOptionPane.showConfirmDialog(null, "Are you sure?", "Delete", JOptionPane.YES_NO_OPTION);
                    if (isRegisterdialog == JOptionPane.YES_OPTION) {
                        boolean isDelete = loginService.deleteLogin(selectRow);
                        if (isDelete) {
                            JOptionPane.showMessageDialog(null, "Patient has been successfully deleted!", "success", JOptionPane.INFORMATION_MESSAGE);
                            List<Login> logins = loginService.getloginlist();
                            showRegister(logins);
                        } else {
                            JOptionPane.showMessageDialog(null, "Problem !!! Patient has not been successfully deleted!", "error", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                    break;
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        MessageFormat header = new MessageFormat("Report Print");
        MessageFormat footer = new MessageFormat("Report Print");
        try {
            jTable1.print(JTable.PrintMode.NORMAL, header, footer);
        } catch (java.awt.print.PrinterException e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        switch (globname) {
            case "patient":
                try {
                    NewPatientFrame patientFrame = new NewPatientFrame(hospitalService);
                    patientFrame.setVisible(true);
                    List<Patient> patients = hospitalService.getpatientlist();
                    showPatientData(patients);
                } catch (Exception ex) {
                    ex.printStackTrace();
                }

                break;

            case "soreness":
                NewSorenessFrame sorenessFrame = new NewSorenessFrame(hospitalService);
                sorenessFrame.setVisible(true);
                break;

            case "doctor":
                NewDoctorFrame doctorFrame = new NewDoctorFrame(hospitalService);
                doctorFrame.setVisible(true);
                break;

            case "treatment":
                NewTreatmentFrame treatmentFrame = new NewTreatmentFrame(hospitalService);
                treatmentFrame.setVisible(true);
                break;

            case "register":
                NewRegisterFrame registerFrame = new NewRegisterFrame(hospitalService);
                registerFrame.setVisible(true);
                break;

            case "payment":
                NewPaymentFrame newPaymentFrame = new NewPaymentFrame(hospitalService);
                newPaymentFrame.setVisible(true);
                break;

        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void logoutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutBtnActionPerformed
        LoginFrame loginFrame = new LoginFrame(hospitalService);
        loginFrame.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_logoutBtnActionPerformed

    private void treatmentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_treatmentBtnActionPerformed
        try {
            List<Schedule> schedules = hospitalService.getschedulelist();
            showTreatment(schedules);
            changeEnable(true);
            globname = "treatment";
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_treatmentBtnActionPerformed

    private void paymentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paymentBtnActionPerformed
        try {
            List<Payment> payments = hospitalService.getpaymentlist();
            showPaymentData(payments);
            globname = "payment";
            changeEnable(true);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_paymentBtnActionPerformed

    private void keywordTxtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_keywordTxtKeyReleased
        searchtnActionPerformed(null);
    }//GEN-LAST:event_keywordTxtKeyReleased

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            List<Login> logins = loginService.getloginlist();
            showRegister(logins);
            globname = "register";
            changeEnable(true);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        if (evt.getClickCount() == 2) {
            editBtnActionPerformed(null);
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void jTable1AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jTable1AncestorAdded

    }//GEN-LAST:event_jTable1AncestorAdded


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton doctorBtn;
    private javax.swing.JButton editBtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTextField keywordTxt;
    private javax.swing.JButton logoutBtn;
    private javax.swing.JButton newBtn;
    private javax.swing.JButton patientBtn;
    private javax.swing.JButton paymentBtn;
    private javax.swing.JButton searchtn;
    private javax.swing.JButton sorenessBtn;
    private javax.swing.JButton treatmentBtn;
    // End of variables declaration//GEN-END:variables

    private void showPatientData(List<Patient> patients) {
        try {
            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }

            };
            jTable1.setModel(model);
            model.addColumn("Id");
            model.addColumn("Id");
            model.addColumn("Name");
            model.addColumn("Surname");
            model.addColumn("Gender");
            model.addColumn("Date og Birth");
            model.addColumn("Email Adress");
            model.addColumn("Address");
            for (Patient patient : patients) {
                Object[] data = new Object[]{
                    patient.getId(), patient.getR(), patient.getName(), patient.getSurname(), patient.getGender(), patient.getDob(), patient.getAdress(), patient.getEadress()
                };
                model.addRow(data);
            }
            jTable1.getColumnModel().getColumn(0).setMinWidth(0);
            jTable1.getColumnModel().getColumn(0).setMaxWidth(0);
            jTable1.getColumnModel().getColumn(0).setWidth(0);

            model.fireTableDataChanged();

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void showSorenessData(List<Soreness> sorenesses) {
        try {
            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }

            };
            jTable1.setModel(model);
            model.addColumn("Id");
            model.addColumn("Id");
            model.addColumn("Diagonus");
            model.addColumn("Medicines");
            for (Soreness soreness : sorenesses) {
                Object[] data = new Object[]{
                    soreness.getId(), soreness.getR(), soreness.getDiagonis(), soreness.getMedicines()
                };
                model.addRow(data);

            }

            jTable1.getColumnModel().getColumn(0).setMinWidth(0);
            jTable1.getColumnModel().getColumn(0).setMaxWidth(0);
            jTable1.getColumnModel().getColumn(0).setWidth(0);

            model.fireTableDataChanged();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void showDoctorData(List<Doctor> doctors) {
        try {
            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }

            };
            jTable1.setModel(model);
            model.addColumn("Id");
            model.addColumn("Id");
            model.addColumn("Name");
            model.addColumn("Surname");
            model.addColumn("Gender");
            model.addColumn("Task");
            model.addColumn("Department");
            for (Doctor doctor : doctors) {
                Object[] data = new Object[]{
                    doctor.getId(), doctor.getR(), doctor.getName(), doctor.getSurname(), doctor.getGender(),
                    doctor.getTask(), doctor.getDepartament()
                };
                model.addRow(data);
            }
            jTable1.getColumnModel().getColumn(0).setMinWidth(0);
            jTable1.getColumnModel().getColumn(0).setMaxWidth(0);
            jTable1.getColumnModel().getColumn(0).setWidth(0);
            model.fireTableDataChanged();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void showTreatment(List<Schedule> schedules) {
        try {
            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }

            };
            jTable1.setModel(model);
            model.addColumn("id");
            model.addColumn("Id");
            model.addColumn("Patient Name");
            model.addColumn("Soreness Info");
            model.addColumn("Doctor name");
            for (Schedule schedule : schedules) {
                Object[] data = new Object[]{
                    schedule.getId(),
                    schedule.getR(),
                    schedule.getPatient().getName() + " " + schedule.getPatient().getSurname(),
                    schedule.getSoreness().getDiagonis() + " " + schedule.getSoreness().getMedicines(),
                    schedule.getDoctor().getName() + " " + schedule.getDoctor().getSurname()
                };
                model.addRow(data);

            }
            jTable1.getColumnModel().getColumn(0).setMinWidth(0);
            jTable1.getColumnModel().getColumn(0).setMaxWidth(0);
            jTable1.getColumnModel().getColumn(0).setWidth(0);
            model.fireTableDataChanged();
        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }

    private void showPaymentData(List<Payment> payments) {
        try {
            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }

            };

            jTable1.setModel(model);
            model.addColumn("Id");
            model.addColumn("Id");
            model.addColumn("Patient Info");
            model.addColumn("Doctor Info");
            model.addColumn("Diagonis");
            model.addColumn("Date");
            model.addColumn("Medicines");
            model.addColumn("Amount");
            for (Payment payment : payments) {
                Object[] data = new Object[]{
                    payment.getId(),
                    payment.getR(),
                    payment.getPatient().getName() + " " + payment.getPatient().getSurname(),
                    payment.getDoctor().getName() + " " + payment.getDoctor().getSurname(),
                    payment.getSoreness().getDiagonis(),
                    payment.getDate(),
                    payment.getSoreness().getMedicines(),
                    payment.getAmount()
                };
                model.addRow(data);

            }

            jTable1.getColumnModel().getColumn(0).setMinWidth(0);
            jTable1.getColumnModel().getColumn(0).setMaxWidth(0);
            jTable1.getColumnModel().getColumn(0).setWidth(0);
            model.fireTableDataChanged();
        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }

    private void showRegister(List<Login> logins) {
        try {
            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }

            };
            jTable1.setModel(model);
            model.addColumn("Id");
            model.addColumn("Id");
            model.addColumn("Username");
            model.addColumn("Name");
            model.addColumn("Surname");
            for (Login login : logins) {
                Object[] data = new Object[]{
                    login.getId(), login.getR(), login.getUsername(), login.getName(), login.getSurname()
                };
                model.addRow(data);

                jTable1.getColumnModel().getColumn(0).setMinWidth(0);
                jTable1.getColumnModel().getColumn(0).setMaxWidth(0);
                jTable1.getColumnModel().getColumn(0).setWidth(0);
            }

            model.fireTableDataChanged();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void close() {
        WindowEvent winclose = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(winclose);
    }

    private void Date() {
        Calendar cal = new GregorianCalendar();
        int month = cal.get(Calendar.MONTH);
        int day = cal.get(Calendar.DAY_OF_MONTH);
        int year = cal.get(Calendar.YEAR);
        jMenu3.setText(day + "/" + (month + 1) + "/" + year);

        int hour = cal.get(Calendar.HOUR_OF_DAY);
        int minut = cal.get(Calendar.MINUTE);
        jMenu4.setText(hour + ":" + minut);

    }

    private void PatientInfo() {
        Connection c = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String sql = "SELECT * FROM PATIENT"
                + "WHERE ACTIVE=1";
        try {
            c = DBhelper.getconnection();
            if (c != null) {
                ps = c.prepareStatement(sql);
                rs = ps.executeQuery();

            } else {
                System.out.println("Connection is null!");
            }

        } catch (Exception ex) {

        }
    }

    private void changeEnable(boolean b) {
        newBtn.setEnabled(b);
        editBtn.setEnabled(b);
        deleteBtn.setEnabled(b);
    }

    private void changeRole(String role) {
        if (role.equalsIgnoreCase("Role_Patient")) {
            patientBtn.setVisible(false);
            sorenessBtn.setVisible(true);
            doctorBtn.setVisible(true);
            jMenuItem2.setVisible(false);
            jMenuItem4.setVisible(false);
        } else if (role.equalsIgnoreCase("Role_Doctor")) {
            patientBtn.setVisible(true);
            sorenessBtn.setVisible(true);
            jMenuItem2.setVisible(false);
            jMenuItem4.setVisible(false);
            doctorBtn.setVisible(false);
        } else if (role.equalsIgnoreCase("Role_Admin")) {
            changeVisible(true);

        }
    }

    private void changeVisible(boolean b) {
        newBtn.setVisible(b);
        editBtn.setVisible(b);
        deleteBtn.setVisible(b);
        jMenuItem2.setVisible(b);
        jMenuItem4.setVisible(b);
        patientBtn.setVisible(b);
        sorenessBtn.setVisible(b);
        doctorBtn.setVisible(b);

    }
    
//    public void Update_Patient(){
//        try{
//             
//            String sql="SELECT * FROM PATIENT"
//                    + "WHERE ACTIVE=1";
//            ps=c.prepareStatement(sql);
//            rs=ps.executeQuery();
//            jTable1.setModel(DbUtils.resultSetToTableModel(rs));
//        }catch(Exception ex){
//            ex.printStackTrace();
//        }
//    }
    
    
  

}
